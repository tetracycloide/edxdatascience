
The terminal helps to organize files in the system.
On Mac, use utilities > terminal.
On windows, use Git bash program.
Use the keyboard to navigate the command line.
Code: 
echo "hello world"
We refer to all the files, folders, and programs (executables) on your computer as the filesystem.
Your filesystem is organized as a series of nested folders each containing files, folders, and executables. (see the visualization in the textbook)
In Unix, folders are referred to as directories and directories that are inside other directories are often referred to as subdirectories. 
The home directory is where all your stuff is kept.  There is a hierarchical nature to the file system.
Note for Windows Users: The typical R installation will make your Documents directory your home directory in R. This will likely be different from your home directory in Git Bash. Generally, when we discuss home directories, we refer to the Unix home directory which for Windows, in this book, is the Git Bash Unix directory.
The working directory is the current location.
Each terminal window has a working directory associated with it.
The "pwd" command will display your working directory. The "/" symbol separates directories, while the first "/" at the beginning of the path stands for the root directory. When a path starts with "/", it is a "full path", which finds the current directory from the root directory. "Relative path" will be introduced soon.
"~" means the home directory.

ls #list dir content
mkdir folder_name #create directory called "folder_name"
rmdir folder_name  #remove an empty directory as long as it is empty
rm -r folder_name  #remove dir that is not empty, "r" stands for recursive
cd: change dir
../ # two dots represents parent dir
. # single dot represents current workingdir 
cd ~/projects # concatenate with forward slashes
cd ../.. # change to two parent layer beyond
cd -  # whatever dir you were before
cd  # return to the home dir

Key points
The mv command moves files.
[warning] mv will not ask you to confirm the move, and it could potentially overwrite a file.
The rm command removes files.
[warning] rm is permanent, which is different than throwing a folder in the trash.
Code
mv path-to-file path-to-destination-directory
rm filename-1 filename-2 filename-3

less allows you to quickly look at the content of a file
Use q to exit the less page
use the arrows to navigate in the less page
Code
less cv.tex

Key points
Ideally, files (code, data, output) should be structured and self-contained
In a project, we prefer using relative paths (path relative to the default working directory) instead of the full path so that code can run smoothly on other individual's computers.
It is good practice to write a README.txt file to introduce the file structure to facilitate collaboration and for your future reference.
Code
########### In terminal ###########
cd ~    # move to home directory
mkdir projects    # make a new directory called projects
cd projects    # move to ~/projects directory
mkdir murders    # make new directory called murders inside of projects
cd murders    # move to ~/projects/murders/
mkdir data rda    # make two new directories, one is data the other is rda folder
ls    # to check if we indeed have one data folder and one rda folder
pwd    # check the current working directory
mkdir figs    # make a directory called figs to store figures
########## In RStudio ########
# pick existing directory as new project
getwd()    # to confirm current working directory
save()    # save into .rda file, .RData is also fine but less preferred
ggsave("figs/barplot.png")    # save a plot generated by ggplot2 to a dir called "figs"